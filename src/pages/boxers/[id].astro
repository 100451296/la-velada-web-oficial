---
import { BOXERS, type Boxer } from "@/consts/boxers"
import { type Combat } from "@/consts/combats"
import { type Forecast } from "@/consts/forecasts"
import Layout from "@/layouts/Layout.astro"
import CombatSection from "@/sections/Combat.astro"
import Forecasts, { type BoxerWithForecast } from "@/sections/Forecasts.astro"
import { ResponseSentError } from "node_modules/astro/dist/core/errors/errors-data"

export function getStaticPaths() {
	return BOXERS.map(({ id }) => ({
		params: { id },
	}))
}

const { id } = Astro.params

const [boxer] = BOXERS.filter((boxer) => boxer.id === id)

const combatRes = await fetch(
	`${import.meta.env.API_URL}/combats/get-combat-by-boxer-id.json?id=${id}`,
	{
		method: "GET",
		headers: {
			"Content-Type": "application/json",
		},
	}
)

if (combatRes.status !== 200) {
	return new Response(combatRes.statusText, { status: combatRes.status })
}

const combat: Combat = await combatRes.json()

if (!combat) {
	if (combatRes.status !== 200) {
		return new Response("Combat not found", { status: 404 })
	}
}

const boxersRes = await fetch(
	`${import.meta.env.API_URL}/boxers/get-boxers-by-combat-id.json?id=${combat.id}`,
	{
		method: "GET",
		headers: {
			"Content-Type": "application/json",
		},
	}
)

if (boxersRes.status !== 200) {
	return new Response(boxersRes.statusText, { status: boxersRes.status })
}

const boxers: Boxer[] = await boxersRes.json()

if (!boxers) {
	if (boxersRes.status !== 200) {
		return new Response("Boxers not found", { status: 404 })
	}
}

const forecastRes = await fetch(
	`${import.meta.env.API_URL}/forecasts/get-forecast-by-combat-id.json?id=${combat.id}`,
	{
		method: "GET",
		headers: {
			"Content-Type": "application/json",
		},
	}
)

if (forecastRes.status !== 200) {
	return new Response(forecastRes.statusText, { status: forecastRes.status })
}

const forecast: Forecast = await forecastRes.json()

if (!forecast) {
	return new Response("Forecast not found", { status: 404 })
}

console.log(forecast)

const boxersWithForecast: BoxerWithForecast[] = []
let forecastCount = 0

forecast.forecastData.map((forecastData) => {
	const boxer = boxers.find((boxer) => boxer.id === forecastData.boxerId)
	if (boxer) {
		boxersWithForecast.push({ ...boxer, forecast: forecastData.forecast })
		forecastCount += forecastData.predictionsCount
	}
})
---

<Layout
	description={`Información del luchador ${boxer.name}`}
	title={`${boxer.name} - Información del boxeador de La Velada IV`}
>
	<main>
		<section class="flex flex-col items-center">
			<div class="w-full lg:flex lg:items-center">
				<picture class="boxer-photo h-auto w-[400px]" transition:name="boxer-big-image">
					<source srcset={`/img/boxers/${id}-big.avif`} type="image/avif" />
					<img
						class="aspect-[285/428] h-auto w-full"
						alt={`Fotografía de ${boxer.name}`}
						src={`/img/boxers/${id}-big.webp`}
						style="filter: drop-shadow(0 0 20px rgba(0, 0, 0, .5)); mask-image: linear-gradient(to bottom, black 80%, transparent 100%);"
					/>
				</picture>
				<div class="w-full px-10 text-center lg:mx-auto lg:w-1/2 lg:text-left">
					<p class="text-xl text-white">{boxer.realName}</p>
					<p class="text-xl text-white">Edad: {boxer.age}</p>
					<p class="text-xl text-white">Peso: {boxer.weight} kg</p>
					<p class="text-xl text-white">Altura: {boxer.height} cm</p>
					<p class="flex items-center justify-center text-xl lg:justify-start">
						<img class="ml-2" src={`/img/flags/${boxer.country}.webp`} alt={boxer.country} />
					</p>
				</div>
			</div>
		</section>
		<Forecasts combatNumber={combat.id} count={forecastCount} boxers={boxersWithForecast} />
		<CombatSection combatNumber={combat.id} , boxers={boxers} />
	</main>
</Layout>

<script></script>
