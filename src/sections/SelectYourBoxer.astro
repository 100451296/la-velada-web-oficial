---
import ColumnBoxers from "@/components/ColumnBoxers.astro"
import Typography from "@/components/Typography.astro"
import BoxerBigImage from "@/components/BoxerBigImage.astro"
import { BOXERS } from "@/consts/boxers"
import { COUNTRIES } from "@/consts/countries"

const listOfBoxers = BOXERS.map((boxer) => {
	const { country } = boxer
	const countryName = COUNTRIES[country]?.name || ""
	return { ...boxer, countryName }
})

// split in 4 columns
const boxerColumns = [
	listOfBoxers.slice(0, 3),
	listOfBoxers.slice(3, 6),
	listOfBoxers.slice(6, 9),
	listOfBoxers.slice(9, 12),
]
---

<section class="my-40">
	<Typography
		as="h3"
		variant="atomic-title"
		color="primary"
		class:list={"text-center"}
		id="selectedBoxer"
	>
		elige tu luchador
	</Typography>

	<Typography as="p" variant="body" color="neutral" class="mt-4 text-center">
		Conoce los detalles de cada boxeador
	</Typography>

	<div class="mt-32 flex hidden flex-row items-center justify-center gap-8 md:flex">
		<article class="absolute flex w-full flex-col items-center justify-center">
			<BoxerBigImage id="el-mariana" name="El Mariana" country="mx" countryName="México" />
		</article>
		<div class="boxers-nav flex w-full justify-between">
			<nav class="boxers-lists flex h-full justify-start gap-2 py-4">
				<ColumnBoxers boxers={boxerColumns[0]} />
				<ColumnBoxers boxers={boxerColumns[1]} class="mt-4" />
			</nav>

			<nav class="boxers-lists flex h-full justify-end gap-2 py-4">
				<ColumnBoxers boxers={boxerColumns[2]} class="mt-4" />
				<ColumnBoxers boxers={boxerColumns[3]} />
			</nav>
		</div>
	</div>

	<!-- Nuevo código para dispositivos móviles -->
	<div class="mt-32 flex flex-col items-center justify-center md:hidden">
		<article class="flex w-full flex-col items-center justify-center">
			<BoxerBigImage id="el-mariana" name="El Mariana" country="mx" countryName="México" />
		</article>
		<div class="carousel mt-8 w-full overflow-x-scroll">
			<div class="carousel-inner flex">
				{
					listOfBoxers.map((boxer) => (
						<div class="carousel-item w-1/3 flex-shrink-0 px-2">
							<ColumnBoxers boxers={[boxer]} />
						</div>
					))
				}
			</div>
		</div>
	</div>
</section>

<script>
	document.addEventListener("astro:page-load", () => {
		const boxerLinks = document.querySelectorAll(
			".boxer-link"
		) as globalThis.NodeListOf<HTMLAnchorElement>
		const boxerNav = document.querySelector(".boxers-nav")
		const boxerTitle = document.querySelector(".boxer-title") as HTMLImageElement
		const boxerPhoto = document.querySelector(".boxer-photo") as HTMLPictureElement
		const boxerCountry = document.querySelector(".boxer-flag") as HTMLImageElement

		function activateBoxer(element: HTMLElement, link: HTMLElement, replaceUrl: boolean = false) {
			if (element.classList.contains("active")) return

			const { id, name, country, countryName } = element?.dataset

			if (!id || !name || !country || !countryName) return

			const splitName = name.split(" ")
			const lastName = splitName[splitName.length - 1]
			const firstNames = splitName.slice(0, splitName.length - 1).join(" ")
			const spanNames = `
        <a href="/boxers/${id}" class="boxer-link underline-transition transition-all duration-300 hover:text-accent motion-reduce:transition-none">
          <span class="flex flex-col">
            <span class="text-4xl">${firstNames.toLocaleLowerCase()}</span>
            <span>${lastName.toLocaleLowerCase()}</span>
          </span>
        </a>
      `

			boxerNav?.querySelector(".active")?.classList.remove("active")
			link.classList.add("active")
			if (replaceUrl) {
				history.replaceState({}, "", `?boxer=${id}`)
			}

			const boxerSrc = `/img/boxers/${id}-big`

			boxerPhoto.getElementsByTagName("source")[0].srcset = `${boxerSrc}.avif`
			boxerPhoto.getElementsByTagName("img")[0].src = `${boxerSrc}.webp`
			boxerTitle.innerHTML = spanNames
			boxerCountry.src = `/img/flags/${country}.webp`
			boxerPhoto.getElementsByTagName("img")[0].alt = `Fotografía de ${name}`
			boxerCountry.alt = `Bandera de ${countryName}`
		}

		const urlParams = new URLSearchParams(window.location.search)
		const boxerId = urlParams.get("boxer") ?? "el-mariana"
		const boxerEl = document.querySelector(`[data-id="${boxerId}"]`) as HTMLElement
		if (boxerEl) {
			activateBoxer(boxerEl, boxerEl, false)
		}

		boxerLinks.forEach((link) => {
			link.addEventListener("mouseenter", (event) => {
				const currentTarget = event.currentTarget as HTMLElement
				if (currentTarget.classList.contains("active")) return
				activateBoxer(currentTarget, link, true)
			})
		})

		// Nuevo código para dispositivos móviles
		const carouselInner = document.querySelector(".carousel-inner") as HTMLElement
		const carouselItems = document.querySelectorAll(".carousel-item") as NodeListOf<HTMLElement>

		function updateCarousel() {
			if (carouselItems.length === 0) return

			const activeItem = document.querySelector(".carousel-item.active") as HTMLElement
			const activeIndex = Array.from(carouselItems).indexOf(activeItem)
			const itemWidth = carouselItems[0].offsetWidth
			const scrollLeft = activeIndex * itemWidth

			carouselInner.style.transform = `translateX(-${scrollLeft}px)`
		}

		function activateCarouselItem(item: HTMLElement) {
			const { id, name, country, countryName } = item.dataset

			if (!id || !name || !country || !countryName) return

			carouselItems.forEach((item) => item.classList.remove("active"))
			item.classList.add("active")

			const boxerSrc = `/img/boxers/${id}-big`

			boxerPhoto.getElementsByTagName("source")[0].srcset = `${boxerSrc}.avif`
			boxerPhoto.getElementsByTagName("img")[0].src = `${boxerSrc}.webp`
			boxerPhoto.getElementsByTagName("img")[0].alt = `Fotografía de ${name}`
			boxerCountry.src = `/img/flags/${country}.webp`
			boxerCountry.alt = `Bandera de ${countryName}`

			updateCarousel()
		}

		function handleCarouselScroll() {
			if (carouselItems.length === 0) return

			const itemWidth = carouselItems[0].offsetWidth
			const scrollLeft = carouselInner.scrollLeft
			const activeIndex = Math.round(scrollLeft / itemWidth)

			carouselItems.forEach((item, index) => {
				if (index === activeIndex) {
					item.classList.add("active")
					activateCarouselItem(item)
				} else {
					item.classList.remove("active")
				}
			})
		}

		let scrollTimeout: number | undefined

		function handleCarouselScrollEnd() {
			clearTimeout(scrollTimeout)
			scrollTimeout = setTimeout(() => {
				handleCarouselScroll()
			}, 100)
		}

		if (carouselInner) {
			carouselInner.addEventListener("scroll", handleCarouselScrollEnd)
		}

		carouselItems.forEach((item) => {
			item.addEventListener("click", () => {
				activateCarouselItem(item)
			})
		})
	})
</script>

<style>
	.boxers-lists {
		@apply relative w-screen overflow-x-scroll md:h-[480px] xl:h-32;
		scrollbar-width: none;
	}

	@media (min-width: 1280px) {
		.boxers-lists {
			@apply h-auto w-full max-w-none overflow-hidden py-2;
		}
	}

	@media (max-width: 768px) {
		.carousel {
			scrollbar-width: none;
		}

		.carousel::-webkit-scrollbar {
			display: none;
		}

		.carousel-inner {
			transition: transform 0.3s ease-in-out;
		}

		.carousel-item {
			opacity: 0.5;
			transition: opacity 0.3s ease-in-out;
		}

		.carousel-item.active {
			opacity: 1;
		}
	}
</style>
